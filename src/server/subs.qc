/*
	gmapn_subs.qc

	Copyright (C) 1996-1997	 Id Software, Inc.
	Copyright (C) 2009		 Andreas Nilsson

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

	See the GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to:

		Free Software Foundation, Inc.
		59 Temple Place - Suite 330
		Boston, MA	02111-1307, USA

*/

void safe_remove(entity e)
{
	if (e != __NULL__)
	{
		remove(e);
	}
}

void self_destruct()
{
	remove(self);
};

// Called when the timer entity runs out, remove it as it's now unneeded
void usetargets_delay()
{
	usetargets();
	remove(self);
};

void usetargets()
{
	entity stemp, otemp, targ, etimer;

	if (activator == world)
	{
		//error("activator was null. globals are bad, kids.\n");
		//return;
		dprint("WARNING: Activator was null!\nuser (self): ", self.classname, "\n");
	}

	// Delay the function if self.delay is set
	if (self.delay > 0)
	{
		// FIXME: go through the .use-functions and make sure all the needed
		// variables are set here

		// Timer entity used to fork here
		etimer = spawn();

		etimer.enemy = activator;
		etimer.killtarget = self.killtarget;
		etimer.message = self.message;
		etimer.target = self.target;
		etimer.use = self.use;

		etimer.nextthink = time + self.delay;
		etimer.think = usetargets_delay;

		return;
	}

	if (self.killtarget)
	{
		targ = find(world, targetname, self.killtarget);
		while (targ)
		{
			remove(targ);
			targ = find(targ, targetname, self.target);
		}

		//FIXME: WTF! but this matches vanilla!
		return;
	}

	// Call use function on target
	targ = find(world, targetname, self.target);
	while (targ)
	{
		stemp = self;
		otemp = other;
		self = targ;
		other = stemp;

		if (self.use)
		{
			self.use();
		}

		self = stemp;
		other = otemp;

		targ = find(targ, targetname, self.target);
	}
};

void calcmove_done()
{
	setorigin(self, self.finaldest);
	self.velocity = '0 0 0';
	if (self.think1)
	{
		self.think1();
	}
};

void calcmove(vector goalpos, float vel, void() move_done)
{
	float  traveltime;
	vector dir;

	// Current position equals target position
	if (self.origin != goalpos)
	{
		dir = goalpos - self.origin;
		traveltime = vlen(dir) / vel;
		self.velocity = normalize(dir) * vel;
	}
	else
	{
		// Need some time to think, not an actual travel time
		traveltime = 0.1;

		// Nowhere to go, no speed to get
		self.velocity = '0 0 0';
	}
	self.finaldest = goalpos;
	self.nextthink = self.ltime + traveltime;
	self.think = calcmove_done;
	self.think1 = move_done;

};

void gmapn_id_angles_sucks()
{
	if (self.angles == '0 -1 0')
	{
		// This really means angles pointing 90 degrees upwards
		// Lame standard being followed
		self.angles = '-90 0 0';
	}
	else if (self.angles == '0 -2 0')
	{
		// Same thing, but pointing 90 degrees downward
		self.angles = '90 0 0';
	}
	makevectors(self.angles);
	self.movedir = v_forward;

	// Since angles are used to calculate a moving direction, this
	// field is not used to rotate the entity. Void it.
	self.angles = '0 0 0';
};

float crandom()
{
	return random() - 0.5;
};

void gmapn_dropspawn()
{
	self.solid = SOLID_BBOX;
	setsize(self, VEC_HULL_MIN, VEC_HULL_MAX);
	self.origin = self.origin + '0 0 24';

	if (!droptofloor())
	{
		self.origin = self.origin + '0 0 -24';
	}

	self.solid = SOLID_TRIGGER;
	setorigin(self, self.origin);
	setsize(self, '0 0 0', '0 0 0');
};

void gmapn_sound(entity e, float channel, string file, float volume, float attn, float soundflags)
{
	if (getkey(reliablesounds))
		sound(e, channel, file, volume, attn, 100, soundflags|SOUNDFLAG_RELIABLE, 0);
	else
		sound(e, channel, file, volume, attn, 100, soundflags, 0);
}

float entities_touching(entity e1, entity e2)
{
	// Check that the entities is out of range from touching each
	// other, otherwise they are.

	if (e1.mins_x > e2.maxs_x)
	{
		return FALSE;
	}
	if (e1.mins_y > e2.maxs_y)
	{
		return FALSE;
	}
	if (e1.mins_z > e2.maxs_z)
	{
		return FALSE;
	}
	if (e1.maxs_x < e2.mins_x)
	{
		return FALSE;
	}
	if (e1.maxs_y < e2.mins_y)
	{
		return FALSE;
	}
	if (e1.maxs_z < e2.mins_z)
	{
		return FALSE;
	}

	return TRUE;
};

/*
============
CanDamage

Returns true if the inflictor can directly damage the target.  Used for
explosions and melee attacks.
============
*/
float candamage(entity targ, entity inflictor)
{
// bmodels need special checking because their origin is 0,0,0
	if (targ.movetype == MOVETYPE_PUSH)
	{
		traceline(inflictor.origin, 0.5 * (targ.absmin + targ.absmax), TRUE, self);
		if (trace_fraction == 1)
			return TRUE;
		if (trace_ent == targ)
			return TRUE;
		return FALSE;
	}

	traceline(inflictor.origin, targ.origin, TRUE, self);
	if (trace_fraction == 1)
		return TRUE;
	traceline(inflictor.origin, targ.origin + '15 15 0', TRUE, self);
	if (trace_fraction == 1)
		return TRUE;
	traceline(inflictor.origin, targ.origin + '-15 -15 0', TRUE, self);
	if (trace_fraction == 1)
		return TRUE;
	traceline(inflictor.origin, targ.origin + '-15 15 0', TRUE, self);
	if (trace_fraction == 1)
		return TRUE;
	traceline(inflictor.origin, targ.origin + '15 -15 0', TRUE, self);
	if (trace_fraction == 1)
		return TRUE;

	return FALSE;
};

void killed(entity targ, entity attacker)
{
	entity oself;

	oself = self;
	self = targ;

	if (self.health < -99)
		self.health = -99;				// don't let sbar look bad if a player dies

	self.death_finished = time + 3.0;	// FIXME: set this to standard time
	self.enemy = attacker;

	// bump the monster counter
	if (self.flags & FL_MONSTER)
	{
		killed_monsters = killed_monsters + 1;
		WriteByte(MSG_ALL, SVC_KILLEDMONSTER);
	}

	if (gmapn_serverstate == gmapn_serverstate_playing)
	{
		client_obituary(self, attacker);
	}

	self.takedamage = DAMAGE_NOT;
	self.touch = 0;
	self.effects = 0;

	self = oself;

	if (attacker && attacker != targ && (!teamplay || attacker.teamname != targ.teamname))
	{
		// Only count enemies killed

		attacker.stats_kills++;
	}

	targ.stats_deaths++;
};

// Use the following three functions to do damage

void gmapn_kill(entity victim, entity attacker)
{
	// Kill this victim immediately if it's not pented, /kill bypasses this check

	victim.armorvalue = 0;
	victim.health = -100;
	gmapn_death(victim, attacker);
};

float gmapn_impact(entity victim, entity inflictor, float damage, float push)
{
	entity stemp;
	entity attacker;
	float  amrdmg;
	float  hthdmg;
	float  pentmod;
	float  quadmod;
	float  reflect = 0;
	vector vel;
	vector dir;

	if (victim.takedamage == DAMAGE_NOT)
	{
		return 0;					// No damage
	}

	if (victim.takedamage == DAMAGE_EXPLODE)
	{
		victim.takedamage = DAMAGE_NOT;
		damage += gmapn_explosion(victim, 160, 1, world, DT_EXPLOSION);

		WriteByte(MSG_MULTICAST, SVC_TEMPENTITY);
		WriteByte(MSG_MULTICAST, TE_EXPLOSION);
		WriteCoord(MSG_MULTICAST, victim.origin_x + 16);
		WriteCoord(MSG_MULTICAST, victim.origin_y + 16);
		WriteCoord(MSG_MULTICAST, victim.origin_z + 32);
		multicast(victim.origin, MULTICAST_PHS);

		remove(victim);

		return damage;				// Explosion boxes takes full damage
	}

	if (inflictor.owner != world)
	{
		attacker = inflictor.owner;
	}
	else
	{
		attacker = inflictor;
	}

	if (victim.takedamage == DAMAGE_TRIGGER)
	{
		gmapn_blood(inflictor, victim, damage);		// Standard QW

		activator = attacker;

		stemp = self;
		self = victim;
		self.use();
		self = stemp;

		return damage;				// Triggers takes full damage
	}

	if (inflictor.items & IT_QUAD)
	{
		// Inflicting object is quaded
		quadmod = 4;
	}
	else
	{
		quadmod = 1;
	}

	if (inflictor.items2 & IT2_RUNE_STRENGTH)
	{
		quadmod *= 2;
		if (time > inflictor.runetime)
		{
			gmapn_sound(inflictor, CHAN_BODY, "rune/rune2.wav", 1, ATTN_NORM, 0);
			inflictor.runetime = time + 1;
		}
	}
	if (victim.items2 & IT2_RUNE_RESISTANCE)
	{
		quadmod *= 0.5;	//should affect armour too
		if (time > victim.runetime)
		{
			gmapn_sound(victim, CHAN_BODY, "rune/rune1.wav", 1, ATTN_NORM, 0);
			victim.runetime = time + 1;
		}
	}

	if (deathmatch == DMM_MIDAIR)
		push *= 1.5;

	// Invoke velocity pushback, but only on players, because its too weird on monsters, and too buggy on doors.

	if (inflictor != world && victim.classname == "player")
	{
		dir = victim.origin - (inflictor.absmin + inflictor.absmax) * 0.5;
		dir = normalize(dir);
		vel = 8 * dir * damage * quadmod * push;
		victim.velocity = victim.velocity + vel;
	}

	if (victim.takedamage == DAMAGE_INVINCIBLE
		&& victim.deathtype != DT_TELEFRAG
		&& victim.deathtype != DT_TELEFRAG_PENT
		&& victim.deathtype != DT_TELEFRAG_PENT_BOTH)
		return 0;	//frozen players can be pushed around, but you can't otherwise hurt them.

	if (deathmatch == DMM_MIDAIR)
	{
		if (victim.flags & FL_ONGROUND)
			return 0;

	}

	// Pent check

	pentmod = 1;

	if ((victim.items & IT_PENT) || (victim.flags & FL_GODMODE))
	{
		gmapn_sound(victim, CHAN_ITEM, "items/protect3.wav", 1, ATTN_NORM, 0);
		pentmod = 0;
	}
	else if (victim.items & IT_SUIT)	//FIXME: make more effective only against RL+LG
		pentmod = 0.5;
	else if (victim != attacker && inflictor != world)
	{
		// Another player is hit

		gmapn_blood(inflictor, victim, damage);
	}

	if (gmapn_serverstate != gmapn_serverstate_playing)
	{
		return damage;
	}

	// Damage armor

	amrdmg = ceil(victim.armortype * damage * quadmod);

	switch (victim.deathtype)
	{
	case DT_TEAMREFLECT:

		amrdmg = 0;
		break;

	case DT_AXE:

		amrdmg *= (pentmod ? getkey(axe_absorb) : 1.0);
		break;

	case DT_BULLET:

		amrdmg *= (pentmod ? getkey(shotgun_absorb) : 1.0);
		break;

	case DT_SUPER_BULLET:

		amrdmg *= (pentmod ? getkey(shotgun2_absorb) : 1.0);
		break;

	case DT_NAIL:

		amrdmg *= (pentmod ? getkey(spike_absorb) : 1.0);
		break;

	case DT_SUPER_NAIL:

		amrdmg *= (pentmod ? getkey(spike2_absorb) : 1.0);
		break;

	case DT_GRENADE:

		amrdmg *= (pentmod ? getkey(grenade_absorb) : 1.0);
		break;

	case DT_ROCKET:

		amrdmg *= (pentmod ? getkey(rocket_absorb) : 1.0);
		break;

	case DT_BOLT:

		amrdmg *= (pentmod ? getkey(lightning_absorb) : 1.0);
		break;

	case DT_RAILGUN:

		amrdmg *= (pentmod ? getkey(rail_absorb) : 1.0);
		break;
	}

	if (amrdmg >= victim.armorvalue)
	{
		amrdmg = victim.armorvalue;
		victim.armortype = 0;
		victim.items = victim.items - (victim.items &
				   (IT_ARMOR1 | IT_ARMOR2 | IT_ARMOR3));
	}
	victim.armorvalue = victim.armorvalue - amrdmg;

	// Damage health
	hthdmg = pentmod * ceil(damage * quadmod - amrdmg);

	if (victim.deathtype == DT_TELEFRAG || victim.deathtype == DT_TELEFRAG_PENT || victim.deathtype == DT_TELEFRAG_PENT_BOTH || victim.deathtype == DT_TEAMREFLECT)
	{}	//telefrag always does full damage, even to team members.
	else if (victim == attacker)
		hthdmg *= (deathmatch == DMM_MIDAIR) ? 0 : getkey(game_selfdamage);	//multiplier to reduce damage to yourself.
	else if (teamplay && victim.classname == "player" && attacker.classname == "player" && (coop||victim.teamname == attacker.teamname))
	{	//you can destroy a teammate's armour, but any health damage will be inflicted upon you instead (and ignores your armour).
		reflect = hthdmg * getkey(game_teamdamage_reflect);
		hthdmg = hthdmg * getkey(game_teamdamage);
	}

	victim.health = victim.health - hthdmg;

	// FIXME: maybe should check DMM_INSTAGIB || DMM_MIDAIR
	if ((deathmatch == DMM_MIDAIR || deathmatch == DMM_INSTAGIB) && inflictor != world && (hthdmg || amrdmg))
	{	//instagib and midair
		float midairheight = victim.origin_z - attacker.origin_z;
		if (!(deathmatch == DMM_MIDAIR && midairheight < 190))
		{
			victim.health = -100;
		}
	}

	// Display a red damage tint

	if (victim.flags & FL_CLIENT)
	{
		victim.dmg_inflictor = attacker;
		victim.dmg_save = victim.dmg_save + amrdmg;
		victim.dmg_take = victim.dmg_take + hthdmg;
	}

	if (victim.health < 1)
	{
		// Death sequence
		gmapn_death(victim, attacker);
	}
	else if (victim != attacker)
	{
		// Pain sequence
		stemp = self;
		self = victim;
		if (victim.flags & FL_MONSTER)	//monsters get pissy at anything that attacks them
		{
			if (attacker.takedamage && attacker != victim && attacker != victim.enemy)	//only get mad at if it makes sense.
			{
				if (attacker.classname != victim.classname || victim.classname == "monster_army")	//and don't attack your friends. unless you're an idiot.
				{
					if (!victim.oldenemy || victim.enemy.classname == "player")
						victim.oldenemy = victim.enemy;
					victim.enemy = attacker;
					FoundTarget ();
				}
			}
		}
		if (self.th_pain)
			self.th_pain(attacker, damage);
		else if ((self.flags & FL_CLIENT) && deathmatch != 4)
			player_pain();
		self = stemp;
	}

	if (reflect)
	{
		attacker.deathtype = DT_TEAMREFLECT;
		gmapn_impact(attacker, victim, reflect, push);
	}

	return damage;
};

float gmapn_explosion(entity inflictor, float damage, float push, entity ignore, float dtflag)
{
	float  points;
	float  totaldamage;
	entity victim;
	vector org;

	totaldamage = 0;
	victim = findradius(inflictor.origin, damage + 40);

	while (victim)
	{
		if (victim != ignore && victim.takedamage)
		{
			org = victim.origin + (victim.mins + victim.maxs) * 0.5;
			points = 0.5 * vlen(inflictor.origin - org);
			if (points < 0)
			{
				points = 0;
			}
			points = damage - points;

			if (points > 0)
			{
				if (candamage(victim, inflictor))
				{
					victim.deathtype = dtflag;

					if (victim == inflictor.owner)
					{
						// Don't log damage to self and reduce the damage

						gmapn_impact(victim, inflictor, points * 0.5, push);
					}
					else
					{
						totaldamage += gmapn_impact(victim, inflictor, points, push);
					}
				}
			}
		}
		victim = victim.chain;
	}

	return totaldamage;
};

void gmapn_death(entity victim, entity attacker)
{
	entity stemp;

	killed(victim, attacker);
	stemp = self;
	self = victim;

	if (victim.flags & FL_MONSTER)
	{
		victim.flags &= ~(FL_FLY | FL_SWIM);
		activator = attacker;
		usetargets();
	}

	if (self.th_die)
		self.th_die();
	else
		player_death();
	self = stemp;
};

void gmapn_blood(entity inflictor, entity victim, float damage)
{
	if (inflictor.weapon == IT_LIGHTNING_GUN || inflictor.weapon == IT_RAILGUN)
	{
		WriteByte(MSG_MULTICAST, SVC_TEMPENTITY);
		WriteByte(MSG_MULTICAST, TE_LIGHTNINGBLOOD);
		WriteCoord(MSG_MULTICAST, trace_endpos_x);
		WriteCoord(MSG_MULTICAST, trace_endpos_y);
		WriteCoord(MSG_MULTICAST, trace_endpos_z);
		multicast(trace_endpos, MULTICAST_PHS);
	}
	else if (inflictor.weapon == IT_SHOTGUN || inflictor.weapon == IT_SUPER_SHOTGUN)
	{
		entity tmp = other;
		other = victim;
		traceline(inflictor.origin, (victim.absmin+victim.absmax)*0.5, MOVE_OTHERONLY, inflictor);
		other = tmp;
		WriteByte(MSG_MULTICAST, SVC_TEMPENTITY);
		WriteByte(MSG_MULTICAST, TE_BLOOD);
		WriteByte(MSG_MULTICAST, ceil(damage / 5));
		WriteCoord(MSG_MULTICAST, trace_endpos_x);
		WriteCoord(MSG_MULTICAST, trace_endpos_y);
		WriteCoord(MSG_MULTICAST, trace_endpos_z);
		multicast(trace_endpos, MULTICAST_PHS);
	}
	else
	{
		WriteByte(MSG_MULTICAST, SVC_TEMPENTITY);
		WriteByte(MSG_MULTICAST, TE_BLOOD);
		WriteByte(MSG_MULTICAST, ceil(damage / 5));
		WriteCoord(MSG_MULTICAST, victim.origin_x);
		WriteCoord(MSG_MULTICAST, victim.origin_y);
		WriteCoord(MSG_MULTICAST, victim.origin_z);
		multicast(victim.origin, MULTICAST_PHS);
	}
};

void gmapn_centerprint_clear()
{
	entity printer = world;

	if (self.classname == "gmapn_centerprint")
		printer = self;
	else
	{
		while ((printer = find(printer, classname, "gmapn_centerprint")))
		{
			if (printer.owner == self)
				break;
		}
	}

	if (printer)
	{
		centerprint(printer.owner, "\n");
		remove(printer);
	}
};

const float printinterval = 0.01;

void gmapn_centerprint_think()
{
	self.nextthink = time + printinterval;
	self.cnt -= printinterval;

	if (self.cnt <= 0)
	{
		self.think = gmapn_centerprint_clear;

		return;
	}

	centerprint(self.owner, self.str);
}

void gmapn_centerprint(entity client, string msg, float duration)
{
	entity printer;

	// Clear any lurking printing timer
	gmapn_centerprint_clear();

	// Classname to find it again, message, duration to stay up
	printer = spawn();
	printer.classname = "gmapn_centerprint";
	printer.str = msg;
	printer.cnt = duration;
	printer.nextthink = time + printinterval;
	printer.owner = client;
	printer.think = gmapn_centerprint_think;

	centerprint(client, msg);
};

void item_drop()
{
	self.movetype = MOVETYPE_TOSS;

	self.origin_z = self.origin_z + 6;
	if (!droptofloor())
	{
		dprint(self.classname);
		dprint(" fell out at ");
		dprintln(vtos(self.origin + '0 0 -6'));
	}
	else
	{
		// Safely dropped down, don't fall down more than this
		self.flags = self.flags | FL_ONGROUND;
	}
};

void remove_wall()
{
	entity e;

	e = find(world, targetname, self.killtarget);
	while (e)
	{
		remove(e);
		e = find(world, targetname, self.killtarget);
	}
};

float weaponnum(float weaponflag)
{
	if (weaponflag & IT_AXE)
		return 1;
	if (weaponflag & IT_SHOTGUN)
		return 2;
	if (weaponflag & IT_SUPER_SHOTGUN)
		return 3;
	if (weaponflag & IT_NAILGUN)
		return 4;
	if (weaponflag & IT_SUPER_NAILGUN)
		return 5;
	if (weaponflag & IT_GRENADE_LAUNCHER)
		return 6;
	if (weaponflag & IT_ROCKET_LAUNCHER)
		return 7;
	if (weaponflag & IT_LIGHTNING_GUN)
		return 8;
	return 0;
}

void switchweapon(float old, float new, float maxswitch)
{
	if (weaponnum(old) < weaponnum(new) && maxswitch >= weaponnum(new))
		client_setweapon(new);
}

float countplayers()
{
	float players = 0;
	entity p = world;

	while ((p = find(p, classname, "player")))
		players += 1;

	return players;
}

// Check if entity would clip with something solid at location. Returns true if clipping detected.
bool is_location_occupied(entity e, vector loc)
{
	entity p;
	tracebox(loc, e.mins, e.maxs, loc, false, e);
	p = trace_ent;
	return (trace_startsolid || trace_fraction != 1 || (p != world && p != e && (p.solid == SOLID_BSP || p.solid == SOLID_SLIDEBOX)));
}

// Find count of edicts matching particular field value.
int find_cnt(.string fld, string match)
{
	int cnt = 0;
	for (entity p = world; (p = find(p, fld, match)); cnt++)
		; // Nothing.
	return cnt;
}

// Find edict with particular index number and matching particular field value.
entity find_idx(.string fld, string match, int idx)
{
	int cnt = 0;

	if (idx < 0)
	{
		return world; // Invalid arguments.
	}

	for (entity p = world; (p = find(p, fld, match)); cnt++)
	{
		if (cnt == idx)
		{
			return p; // Found entity for index.
		}
	}
	return world; // Entity not found.
}

// Returns integer number in [from, to] range.
int i_rnd(int from, int to)
{
	float r;

	if (from >= to)
	{
		return from;
	}

	r = (int)(from + (1.0 + to - from) * random());

	return bound(from, r, to);
}

void safe_precache_model(string name)
{
	if (framecount > 2)
		return;
	precache_model(name);
}

void safe_precache_model2(string name)
{
	if (framecount > 2)
		return;
	precache_model2(name);
}

void safe_precache_sound(string name)
{
	if (framecount > 2)
		return;
	precache_sound(name);
}

void safe_precache_sound2(string name)
{
	if (framecount > 2)
		return;
	precache_sound2(name);
}

bool isAlive(entity e)
{
	return (e.health > 0);
}

bool isDead(entity e)
{
	return !isAlive(e);
}
